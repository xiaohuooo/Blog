(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{422:function(t,s,a){"use strict";a.r(s);var e=a(2),n=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"typescript"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#typescript"}},[t._v("#")]),t._v(" typescript")]),t._v(" "),s("h2",{attrs:{id:"ts与js相比较有哪些优势"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ts与js相比较有哪些优势"}},[t._v("#")]),t._v(" ts与js相比较有哪些优势")]),t._v(" "),s("ul",[s("li",[t._v("ts是js的超集，存在类型的脚本语言")]),t._v(" "),s("li",[t._v("继承了js的所有编程类型，js代码可在ts环境很好的运行")]),t._v(" "),s("li",[t._v("为构建大型应用而生，但小程序同样适用")]),t._v(" "),s("li",[t._v("强大的类型系统，拥有静态类型检查能力")]),t._v(" "),s("li",[t._v("新增类型注解和类型推断")]),t._v(" "),s("li",[t._v("拥有丰富的class扩展功能")]),t._v(" "),s("li",[t._v("添加了系统级设计能力，设计模式由顶层由下进行设计")])]),t._v(" "),s("h2",{attrs:{id:"typescript-中的原始类型有哪些"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#typescript-中的原始类型有哪些"}},[t._v("#")]),t._v(" TypeScript 中的原始类型有哪些")]),t._v(" "),s("p",[t._v("布尔值、数值、字符串、null、undefined 以及 ES6 中的新类型 Symbol 和 ES10 中的新类型 BigInt。")]),t._v(" "),s("h2",{attrs:{id:"说说数组在-typescript-中是如何工作的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#说说数组在-typescript-中是如何工作的"}},[t._v("#")]),t._v(" 说说数组在 TypeScript 中是如何工作的")]),t._v(" "),s("p",[t._v("ts限制了你要定义的数组中数据的数据类型")]),t._v(" "),s("p",[t._v("1.类型 + []表示法")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("let array : number[] = [1, 2, 3];\n")])])]),s("p",[t._v("2.接口")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("interface array {\n    [index: number]: number\n}\nlet arr: array = [1, 2, 3, 4, 5];\n")])])]),s("p",[t._v("3.any(常用)")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("let arr: any[] = [1, 2, 3, 4, '5'];\n")])])]),s("h2",{attrs:{id:"any-void-never-类型-何时使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#any-void-never-类型-何时使用"}},[t._v("#")]),t._v(" any/void/never 类型，何时使用")]),t._v(" "),s("p",[t._v("any表示任意类型, 当我们不清楚某个值的具体类型的时候我们就可以使用any\n一般用于定义一些通用性比较强的变量, 或者用于保存从其它框架中获取的不确定类型的值\n在TS中任何数据类型的值都可以负责给any类型")]),t._v(" "),s("p",[t._v("void与any正好相反, 表示没有任何类型, 一般用于函数返回值\n在TS中只有undefined可以赋值给void类型")]),t._v(" "),s("p",[t._v("never 类型表示永远不会有值的一种类型。(很抽象是不是)\nnever类型是那些总是会抛出异常或根本就不会有返回值的函数表达式或箭头函数表达式的返回值类型")]),t._v(" "),s("h2",{attrs:{id:"typescript-中声明变量有哪些不同的关键字"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#typescript-中声明变量有哪些不同的关键字"}},[t._v("#")]),t._v(" TypeScript 中声明变量有哪些不同的关键字")]),t._v(" "),s("p",[t._v("var/let/const 标识符: 数据类型 = 赋值;")]),t._v(" "),s("h2",{attrs:{id:"如何书写带有类型注释的函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何书写带有类型注释的函数"}},[t._v("#")]),t._v(" 如何书写带有类型注释的函数")]),t._v(" "),s("p",[t._v("在ts中，类型注解是一种为函数或者变量添加约束的方式")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("const str: string = 'Hello World';\n")])])]),s("h2",{attrs:{id:"如何在-typescript-中创建对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何在-typescript-中创建对象"}},[t._v("#")]),t._v(" 如何在 TypeScript 中创建对象")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("// 我们先定义一个对象的属性，需要注意的是我们使用接口interface定义对象时，接口的首字母最好是大写\ninterface Person {\n    name : string ,\n    age: number\n}\nlet zhangsan : Person {\n    name : 'zhangsan',\n    age : 25\n}\n")])])]),s("h2",{attrs:{id:"如何在-typescript-中指定可选属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何在-typescript-中指定可选属性"}},[t._v("#")]),t._v(" 如何在 TypeScript 中指定可选属性")]),t._v(" "),s("p",[t._v("接口可选属性的声明，你可以在属性名旁边加上一个问号 ? 来实现。")]),t._v(" "),s("div",{staticClass:"language-ts extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ts"}},[s("code",[t._v("  age"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("number")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h2",{attrs:{id:"说说枚举在-typescript-中是如何工作的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#说说枚举在-typescript-中是如何工作的"}},[t._v("#")]),t._v(" 说说枚举在 TypeScript 中是如何工作的")]),t._v(" "),s("p",[t._v("通俗来说,枚举就是一个对象的所有可能取值的集合")]),t._v(" "),s("div",{staticClass:"language-ts extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ts"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" Days "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("Sun"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Mon"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Tue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Wed"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Thu"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Fri"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Sat"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("console")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Days"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Sun"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("console")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Days"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Mon"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("console")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Days"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Tue"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("console")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Days"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Sat"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),s("h2",{attrs:{id:"说说typescript-中-for-循环的不同变体"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#说说typescript-中-for-循环的不同变体"}},[t._v("#")]),t._v(" 说说TypeScript 中 for 循环的不同变体")]),t._v(" "),s("ul",[s("li",[t._v("逗号运算符。逗号运算符使 for 循环的变体成为可能，如下例所示 -")])]),t._v(" "),s("div",{staticClass:"language-ts extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ts"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("y "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("在这里，x 和 y 都控制循环。")]),t._v(" "),s("ul",[s("li",[t._v("循环定义的缺失部分。for 循环的一个有趣特征是循环定义的部分不需要存在。")])]),t._v(" "),s("div",{staticClass:"language-ts extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ts"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("456")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("ul",[s("li",[t._v("无限循环。如果循环定义中的所有部分都缺失，则会创建一个无限循环。break 语句用于跳出循环")])]),t._v(" "),s("div",{staticClass:"language-ts extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ts"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("ul",[s("li",[t._v("没有实体的 for 循环。for 循环的主体也可能为空。这提高了一些代码的效率。")])]),t._v(" "),s("div",{staticClass:"language-ts extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ts"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("' '")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("循环的另一个应用是具有空体的时间延迟")]),t._v(" "),s("div",{staticClass:"language-ts extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ts"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" t"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" t"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h2",{attrs:{id:"类型注解和类型别名有什么区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类型注解和类型别名有什么区别"}},[t._v("#")]),t._v(" 类型注解和类型别名有什么区别")]),t._v(" "),s("ul",[s("li",[t._v("在ts中，类型注解是一种为函数或者变量添加约束的方式。")])]),t._v(" "),s("blockquote",[s("p",[t._v("let arr1: number[] = [1, 2, 3, 4, 5];")])]),t._v(" "),s("ul",[s("li",[t._v("定义类型别名的时候以type开头  可以使用类型别名为任何类型命名，而不仅仅是对象类型。")])]),t._v(" "),s("blockquote",[s("p",[t._v("type infoType = { name:string,age:number };")])]),t._v(" "),s("h2",{attrs:{id:"类型别名和interface区别是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类型别名和interface区别是什么"}},[t._v("#")]),t._v(" 类型别名和interface区别是什么")]),t._v(" "),s("p",[t._v("不同点：")]),t._v(" "),s("blockquote",[s("p",[t._v("（1）类型别名type用来给一个类型起个新名字，接口interface是命名数据结构（例如对象）的另一种方式")])]),t._v(" "),s("blockquote",[s("p",[t._v("（2）type可以用来表示基本类型、对象类型、联合类型、元组和交集；interface仅限于描述对象类型")])]),t._v(" "),s("blockquote",[s("p",[t._v("（3）interface 定义重名了会合并属性，type 会报错")])]),t._v(" "),s("blockquote",[s("p",[t._v("（4）interface 可以 extends， type 是不允许 extends ，但是 type 缺可以通过交叉类型 实现 interface 的 extend 行为，并且两者并不是相互独立的，也就是说 interface 可以 extends type, type 也可以 与 interface 类型 交叉")])]),t._v(" "),s("p",[t._v("相同点：\n（1）都可以描述 Object和Function\n（2）interface 和 type 都可以继承。")]),t._v(" "),s("h2",{attrs:{id:"谈谈你对泛型的认识"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#谈谈你对泛型的认识"}},[t._v("#")]),t._v(" 谈谈你对泛型的认识")]),t._v(" "),s("p",[t._v("​ A：泛型其实就是在定义类、接口、方法的时候不局限地指定某一种特定类型，而让类、接口、方法的调用者来决定具体使用哪一种类型的参数。")]),t._v(" "),s("p",[t._v("​ B：比如一个水杯生产的时候不用指定它将来干什么？而是由将来的使用者决定放入什么。")]),t._v(" "),s("p",[t._v("​ C：其实就是一句话：我是一个泛型队列，狗可以站进来，猫也可以站进来，但最好不要既站猫，又站狗！别让猫狗站在队列里")]),t._v(" "),s("h2",{attrs:{id:"ts中class类有哪些属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ts中class类有哪些属性"}},[t._v("#")]),t._v(" ts中class类有哪些属性")]),t._v(" "),s("p",[t._v("静态方法和属性"),s("br"),t._v("\n实例属性"),s("br"),t._v("\n私有方法和属性")]),t._v(" "),s("h2",{attrs:{id:"文件声明的关键字是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#文件声明的关键字是什么"}},[t._v("#")]),t._v(" 文件声明的关键字是什么")]),t._v(" "),s("p",[t._v("declare namespace"),s("br"),t._v("\nnamespace 是 ts 早期时为了解决模块化而创造的关键字，中文称为命名空间。")]),t._v(" "),s("p",[t._v("由于历史遗留原因，在早期还没有 ES6 的时候，ts 提供了一种模块化方案，使用 module 关键字表示内部模块。但由于后来 ES6 也使用了 module 关键字，ts 为了兼容 ES6，使用 namespace 替代了自己的 module，更名为命名空间。")]),t._v(" "),s("p",[t._v("随着 ES6 的广泛应用，现在已经不建议再使用 ts 中的 namespace，而推荐使用 ES6 的模块化方案了，故我们不再需要学习 namespace 的使用了。")]),t._v(" "),s("p",[t._v("namespace 被淘汰了，但是在声明文件中，declare namespace 还是比较常用的，它用来表示全局变量是一个对象，包含很多子属性。")]),t._v(" "),s("h2",{attrs:{id:"ts如何实现模块化开发"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ts如何实现模块化开发"}},[t._v("#")]),t._v(" ts如何实现模块化开发")]),t._v(" "),s("p",[t._v("ts 中的模块化，尽量统一使用 es6（es2015）的模块化标准\n前端领域中的模块化标准：ES6、commonjs、amd、umd、system、esnext")]),t._v(" "),s("h2",{attrs:{id:"你认为ts开发中-开发过程是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#你认为ts开发中-开发过程是什么"}},[t._v("#")]),t._v(" 你认为ts开发中，开发过程是什么")])])}),[],!1,null,null,null);s.default=n.exports}}]);